// ****************************************************************************************************
// Generated by GPT. It jumps like crazy but for reference it's fine.
{
const portrait = document.getElementById('portrait');
const eyes = portrait.getElementById('eyes');
const head = portrait.getElementById('head-main');
const eyebrows = portrait.getElementById('eyebrows');

// Add event listener for mousemove event
document.addEventListener('mousemove', handleMousemove);

// Function to handle mousemove event
function handleMousemove(event) {
  const mouseX = event.clientX;
  const mouseY = event.clientY;

  // Calculate the angle between the mouse position and the center of the eyes
  const eyeCenterX = 211.52; // x-coordinate of the eye center
  const eyeCenterY = 122.31; // y-coordinate of the eye center
  const angle = Math.atan2(mouseY - eyeCenterY, mouseX - eyeCenterX);

  // Calculate the tilt angle for the head
  const headTiltAngle = Math.atan2(mouseY - 164.56, mouseX - 225.3);

  // Calculate the vertical position of the eyebrows
  const eyebrowPosition = Math.max(
    Math.min((mouseY - eyeCenterY) / 10, 10),
    -10
  );

  // Rotate the eyes and the head
  eyes.setAttribute(
    'transform',
    `rotate(${angle * (180 / Math.PI)}, ${eyeCenterX}, ${eyeCenterY})`
  );
  head.setAttribute(
    'transform',
    `rotate(${headTiltAngle * (180 / Math.PI)}, ${eyeCenterX}, ${eyeCenterY})`
  );

  // Move the eyebrows
  eyebrows.setAttribute('transform', `translate(0, ${eyebrowPosition})`);
}
}
// ****************************************************************************************************
// I dont remamber how this works but for ref.
{
const angleX = map(e.clientX, e.clientX - 100, e.clientX + 100, -3, 3);
const angleY = map(e.clientY, e.clientY + 100, e.clientY - 100, -3, 3);
console.log(angleX, angleY);
const rotation = `rotateX(${angleY}deg) rotateY(${angleX}deg)`;
root.style.setProperty('--rot', rotation);
}

// ****************************************************************************************************
// For reference
{
const angleX = maxRotation * ((e.clientY - anchorX) / anchorX);
const angleY = maxRotation * ((e.clientX - anchorY) / anchorY);

const angleT =
  maxRotation *
  ((e.clientX - anchorX + e.clientY - anchorY) / (anchorX + anchorY));
}

// ****************************************************************************************************
// For reference

{
const deltaX = e.clientX - anchorX;
const deltaY = e.clientY - anchorY;
const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
let angleT = maxRotation * (deltaX / distance);
angleT = Math.min(Math.max(angleT, -maxRotation), maxRotation);

const rotation = `rotate(${angleT}deg)`;
console.log(rotation);
head.style.transform = rotation;

const angleXX = maxRotation * ((e.clientY - anchorX) / anchorX);

function map(value, fromMin, fromMax, toMin, toMax) {
  return ((value - fromMin) * (toMax - toMin)) / (fromMax - fromMin) + toMin;
}
}

// ****************************************************************************************************
// For reference
{
const portrait = document.getElementById('portrait');
const mouseXOffset = window.innerWidth / 2;
const mouseYOffset = window.innerHeight / 2;

document.addEventListener('mousemove', (event) => {
  const mouseX = event.clientX;
  const mouseY = event.clientY;

  const deltaX = (mouseX - mouseXOffset) * 0.05;
  const deltaY = (mouseY - mouseYOffset) * 0.05;

  portrait.style.transform = `translateY(${deltaY}px) rotateX(${
    deltaY * 2
  }deg) rotateY(${deltaX}deg)`;
});
}

// ****************************************************************************************************
// For reference
{
    const angleDeg = angle(e.clientX, e.clientY, anchorX, anchorY);
    root.style.setProperty("--angle", angleDeg);

    const headTiltAngle = `${angleDeg}deg`;
    root.style.setProperty("--head-tilt-angle", headTiltAngle);

    function angle(cx, cy, ex, ey) {
        const dy = ey - cy;
        const dx = ex - cx;
        const rad = Math.atan2(dy, dx); // range (-PI, PI]
        const deg = (rad * 180) / Math.PI; // rads to degs, range (-180, 180]
        //if (theta < 0) theta = 360 + theta; // range [0, 360)
        return deg;
    }
}